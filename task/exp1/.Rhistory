xs = seq(-41,41,by=0.001)
y1 = dnorm(xs, 1, 25)
y2 = dnorm(xs,1,30)
plot(xs, y1, type='l')
xs = seq(-40,41,by=0.001)
y1 = dnorm(xs, 1, 25)
y2 = dnorm(xs,1,30)
plot(xs, y1, type='l')
xs = seq(-39,41,by=0.001)
y1 = dnorm(xs, 1, 25)
y2 = dnorm(xs,1,30)
plot(xs, y1, type='l')
plot(xs, y1, type='l', ylab='Density', xlab=expression(lambda), col='blue', lwd=2)
lines(xs, y2, col='red', lwd=2)
legend('topleft',bty='n', col=c('blue', 'red'), legend=c('N(1,25)', 'N(1,30)'))
xs = seq(-39,41,by=0.001)
y1 = dnorm(xs, 1, 25)
y2 = dnorm(xs,1,30)
plot(xs, y1, type='l', ylab='Density', xlab=expression(lambda), col='blue', lwd=2)
lines(xs, y2, col='red', lwd=2)
legend('topleft',bty='n', lty=1, col=c('blue', 'red'), legend=c('N(1,25)', 'N(1,30)'))
xs = seq(-50,50,by=0.001)
y1 = dnorm(xs, 1, 25)
y2 = dnorm(xs,1,30)
plot(xs, y1, type='l', ylab='Density', xlab=expression(lambda), col='blue', lwd=2)
lines(xs, y2, col='red', lwd=2)
legend('topleft',bty='n', lty=1, col=c('blue', 'red'), legend=c('N(1,25)', 'N(1,30)'))
xs = seq(-100,100,by=0.001)
y1 = dnorm(xs, 1, 25)
y2 = dnorm(xs,1,30)
plot(xs, y1, type='l', ylab='Density', xlab=expression(lambda), col='blue', lwd=2)
lines(xs, y2, col='red', lwd=2)
legend('topleft',bty='n', lty=1, col=c('blue', 'red'), legend=c('N(1,25)', 'N(1,30)'))
# Set constants -----------------------------------------------------------
set.seed(2022)
niter      = 10
nstep      = 6
premiums   = seq(-0.99,0.99,by=0.1)
betas      = seq(0.01, 5, by=0.1)
nochoice   = 1
choice0    = 1
softmax    = function(x,b) exp(b*x)/sum(exp(b*x))
# Simulate ----------------------------------------------------------------
conditions = expand.grid(premiums=premiums, betas=betas)
out        = data.frame()
for (s in 1:niter) {
cat('sample: ', s, '\n')
for(i in 1:nrow(conditions)) {
p     = conditions[i,'premiums']
b     = conditions[i,'betas']
costs = c(nochoice, choice0)
for(t in 1:nstep) {
# make choice
subjcost    = costs
subjcost[2] = costs[2] - p
probs       = softmax(-subjcost, b)
c           = sample(1:2,size=1,prob=probs)
# update cost
costs[2] = costs[2] + ifelse(c==1,-1,1) * 1/2^t
#cat('t=',t,'\np_choice=', probs[2], '\nchoice= ', c, '\ncost_choice = ', costs[2], '\n')
}
ind = costs[2] - nochoice
out = rbind(out, data.frame(s=s, p=p, b=b, ind=ind))
}
}
library(ComplexHeatmap)
mInd = tapply(out$ind, list(out$p, out$b), mean)
Heatmap(mInd)
Heatmap(mInd, name = 'Indifference Point')
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F )
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice')
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
column_names_rot = 45)
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
column_names_rot = 90)
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
column_names_rot = 0)
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
column_names_rot = 0, row_labels = c(1,2))
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
column_names_rot = 45)
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice')
col_fun = circularize::colorRamp2(c(-2, 0, 2), c("green", "white", "red"))
col_fun = circlize::colorRamp2(c(-2, 0, 2), c("green", "white", "red"))
col_fun
col_fun(seq(-3, 3))
col_fun = circlize::colorRamp2(c(-2, 0, 2), c("purple", "black", "red"))
mInd = tapply(out$ind, list(out$p, out$b), mean)
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
col=col_fun(seq(-3, 3)))
col_fun = circlize::colorRamp2(c(-2, 0, 2), c("white", "black", "red"))
mInd = tapply(out$ind, list(out$p, out$b), mean)
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
col=col_fun(seq(-3, 3)))
col_fun
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
col=col_fun(seq(-3, 3, by=0.01)))
cols = circlize::colorRamp2(seq(min(mInd), max(mInd), length = 3), c("red", "#EEEEEE", "red"))
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
col= cols)
cols = circlize::colorRamp2(seq(min(mInd), max(mInd), length = 3), c("blue", "#EEEEEE", "red"))
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
col= cols)
cols = circlize::colorRamp2(seq(min(mInd), max(mInd), length = 3), c("blue", "#black", "red"))
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
col= cols)
cols = circlize::colorRamp2(seq(min(mInd), max(mInd), length = 3), c("blue", "black", "red"))
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
col= cols)
mInd
ncol(mInd)
length(betas)
mInd[,round(length(betas)/2)]
# Point plot --------------------------------------------------------------------
lowb  = mInd[,round(length(betas)/3)]
medb  = mInd[,round(length(betas)/2)]
highb = mInd[,round(length(betas)/1)]
lowb
highb
# Point plot --------------------------------------------------------------------
lowb  = mInd[,1]
medb  = mInd[,round(length(betas)/2)]
highb = mInd[,length(betas)]
highb
plot(lowb)
lowb
plot(NULL, xlim=c(-1,1), ylim=c(0,1))
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), xlab='True Premium', ylab='Derived Premium')
points(names(lowb), lowb)
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), xlab='True Premium', ylab='Derived Premium')
points(names(lowb), lowb, pch=16, col='blue')
points(names(medb), medb, pch=16, col='black')
points(names(highb), highb, pch=16, col='red')
betas
# Point plot --------------------------------------------------------------------
lowb  = mInd[,'1.01']
medb  = mInd[,'2.51']
highb = mInd[,'4.91']
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), xlab='True Premium', ylab='Derived Premium')
points(names(lowb), lowb, pch=16, col='blue')
points(names(medb), medb, pch=16, col='black')
points(names(highb), highb, pch=16, col='red')
quantile(betas)
quantile(betas,c(0.33,0.5,.66))
# Point plot --------------------------------------------------------------------
lowb  = mInd[,'1.61']
medb  = mInd[,'2.51']
highb = mInd[,'3.21']
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), xlab='True Premium', ylab='Derived Premium')
points(names(lowb), lowb, pch=16, col='blue')
points(names(medb), medb, pch=16, col='black')
points(names(highb), highb, pch=16, col='red')
legend('topleft', bty='n', fill=c('blue', 'black', 'red'), legend=c(1.61, 2.51, 3.21), title=expression(beta))
legend('topleft', bty='n', fill=c('blue', 'black', 'red'), legend=paste0(expression(beta), '=', c(1.61, 2.51, 3.21)))
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), xlab='True Premium', ylab='Derived Premium')
points(names(lowb), lowb, pch=16, col='blue')
points(names(medb), medb, pch=16, col='black')
points(names(highb), highb, pch=16, col='red')
legend('topleft', bty='n', fill=c('blue', 'black', 'red'), legend=paste0('\u03b2=', c(1.61, 2.51, 3.21)))
# Set constants -----------------------------------------------------------
set.seed(2022)
niter      = 50
nstep      = 6
premiums   = seq(-0.99,0.99,by=0.1)
betas      = seq(0.01, 5, by=0.1)
nochoice   = 1
choice0    = 1
softmax    = function(x,b) exp(b*x)/sum(exp(b*x))
# Simulate ----------------------------------------------------------------
conditions = expand.grid(premiums=premiums, betas=betas)
out        = data.frame()
for (s in 1:niter) {
cat('sample: ', s, '\n')
for(i in 1:nrow(conditions)) {
p     = conditions[i,'premiums']
b     = conditions[i,'betas']
costs = c(nochoice, choice0)
for(t in 1:nstep) {
# make choice
subjcost    = costs
subjcost[2] = costs[2] - p
probs       = softmax(-subjcost, b)
c           = sample(1:2,size=1,prob=probs)
# update cost
costs[2] = costs[2] + ifelse(c==1,-1,1) * 1/2^t
#cat('t=',t,'\np_choice=', probs[2], '\nchoice= ', c, '\ncost_choice = ', costs[2], '\n')
}
ind = costs[2] - nochoice
out = rbind(out, data.frame(s=s, p=p, b=b, ind=ind))
}
}
# Heatmap ---------------------------------------------------------------
library(ComplexHeatmap)
mInd = tapply(out$ind, list(out$p, out$b), mean)
cols = circlize::colorRamp2(seq(min(mInd), max(mInd), length = 3), c("blue", "black", "red"))
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
col= cols)
# Point plot --------------------------------------------------------------------
lowb  = mInd[,'1.61']
medb  = mInd[,'2.51']
highb = mInd[,'3.21']
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), xlab='True Premium', ylab='Derived Premium')
points(names(lowb), lowb, pch=16, col='blue')
points(names(medb), medb, pch=16, col='black')
points(names(highb), highb, pch=16, col='red')
legend('topleft', bty='n', fill=c('blue', 'black', 'red'), legend=paste0('\u03b2=', c(1.61, 2.51, 3.21)))
points(names(lowb), lowb, pch=16, col='blue',type='b')
points(names(medb), medb, pch=16, col='black',type='b')
points(names(highb), highb, pch=16, col='red',type='b')
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), xlab='True Premium', ylab='Derived Premium')
points(names(lowb), lowb, pch=16, col='blue',type='b')
points(names(medb), medb, pch=16, col='black',type='b')
points(names(highb), highb, pch=16, col='red',type='b')
legend('topleft', bty='n', fill=c('blue', 'black', 'red'), legend=paste0('\u03b2=', c(1.61, 2.51, 3.21)))
mInd[,length(mInd)]
length(mInd)
mInd[,length(betas)]
# Set constants -----------------------------------------------------------
set.seed(2022)
niter      = 50
nstep      = 6
premiums   = seq(-1,1,by=0.1)
betas      = seq(0, 10, by=0.1)
nochoice   = 1
choice0    = 1
softmax    = function(x,b) exp(b*x)/sum(exp(b*x))
# Simulate ----------------------------------------------------------------
conditions = expand.grid(premiums=premiums, betas=betas)
out        = data.frame()
for (s in 1:niter) {
cat('sample: ', s, '\n')
for(i in 1:nrow(conditions)) {
p     = conditions[i,'premiums']
b     = conditions[i,'betas']
costs = c(nochoice, choice0)
for(t in 1:nstep) {
# make choice
subjcost    = costs
subjcost[2] = costs[2] - p
probs       = softmax(-subjcost, b)
c           = sample(1:2,size=1,prob=probs)
# update cost
costs[2] = costs[2] + ifelse(c==1,-1,1) * 1/2^t
#cat('t=',t,'\np_choice=', probs[2], '\nchoice= ', c, '\ncost_choice = ', costs[2], '\n')
}
ind = costs[2] - nochoice
out = rbind(out, data.frame(s=s, p=p, b=b, ind=ind))
}
}
library(ComplexHeatmap)
mInd = tapply(out$ind, list(out$p, out$b), mean)
cols = circlize::colorRamp2(seq(min(mInd), max(mInd), length = 3), c("blue", "black", "red"))
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
col= cols)
rowlabels = c(min(betas), rep(NA, length(betas)-2),  max(betas))
length(rowlabels)
length(betas)
rowlabels = c(min(betas), rep(NA, length(betas)-2),  max(betas))
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
col= cols, row_labels = rowlabels)
collab = c(min(betas), rep(NA, length(betas)-2),  max(betas))
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
col= cols, column_labels = collab)
collab = c(min(betas), rep('', length(betas)-2),  max(betas))
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
col= cols, column_labels = collab)
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
col= cols, column_labels = collab, column_names_rot = 0)
mInd
library(ComplexHeatmap)
mInd = tapply(out$ind, list(out$p, out$b), mean)
cols = circlize::colorRamp2(seq(min(mInd), max(mInd), length = 3), c("blue", "black", "red"))
collab = c(min(betas), rep('', length(betas)-2),  max(betas))
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
col= cols, column_labels = collab, column_names_rot = 0)
quantile(betas,probs = c(.33,.5,.66))
betas
# Point plot --------------------------------------------------------------------
q = quantile(betas,probs = c(.33,.5,.66))
lowb  = mInd[,as.character(q[1])]
medb  = mInd[,as.character(q[2])]
highb = mInd[,as.character(q[3])]
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), xlab='True Premium', ylab='Derived Premium')
points(names(lowb), lowb, pch=16, col='blue',type='b')
points(names(medb), medb, pch=16, col='black',type='b')
points(names(highb), highb, pch=16, col='red',type='b')
legend('topleft', bty='n', fill=c('blue', 'black', 'red'), legend=paste0('\u03b2=', c(1.61, 2.51, 3.21)))
legend('topleft', bty='n', fill=c('blue', 'black', 'red'), legend=paste0('\u03b2=', q))
q = quantile(betas,probs = c(.33,.5,.66))
lowb  = mInd[,as.character(q[1])]
medb  = mInd[,as.character(q[2])]
highb = mInd[,as.character(q[3])]
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), xlab='True Premium', ylab='Derived Premium')
points(names(lowb), lowb, pch=16, col='blue',type='b')
points(names(medb), medb, pch=16, col='black',type='b')
points(names(highb), highb, pch=16, col='red',type='b')
legend('topleft', bty='n', fill=c('blue', 'black', 'red'), legend=paste0('\u03b2=', q))
dev.off()
# Set constants -----------------------------------------------------------
set.seed(2022)
niter      = 50
nstep      = 6
premiums   = seq(-1,1,by=0.1)
betas      = seq(0, 10, by=0.1)
nochoice   = 1
choice0    = 1
softmax    = function(x,b) exp(b*x)/sum(exp(b*x))
# Simulate ----------------------------------------------------------------
conditions = expand.grid(premiums=premiums, betas=betas)
out        = data.frame()
for (s in 1:niter) {
cat('sample: ', s, '\n')
for(i in 1:nrow(conditions)) {
p     = conditions[i,'premiums']
b     = conditions[i,'betas']
costs = c(nochoice, choice0)
for(t in 1:nstep) {
# make choice
subjcost    = costs
subjcost[2] = costs[2] - p
probs       = softmax(-subjcost, b)
c           = sample(1:2,size=1,prob=probs)
# update cost
costs[2] = costs[2] + ifelse(c==1,-1,1) * 1/2^t
#cat('t=',t,'\np_choice=', probs[2], '\nchoice= ', c, '\ncost_choice = ', costs[2], '\n')
}
ind = costs[2] - nochoice
out = rbind(out, data.frame(s=s, p=p, b=b, ind=ind))
}
}
# Heatmap ---------------------------------------------------------------
library(ComplexHeatmap)
mInd = tapply(out$ind, list(out$p, out$b), mean)
cols = circlize::colorRamp2(seq(min(mInd), max(mInd), length = 3), c("blue", "black", "red"))
collab = c(min(betas), rep('', length(betas)-2),  max(betas))
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
col= cols, column_labels = collab, column_names_rot = 0)
# Point plot --------------------------------------------------------------------
q = quantile(betas,probs = c(.33,.5,.66))
lowb  = mInd[,as.character(q[1])]
medb  = mInd[,as.character(q[2])]
highb = mInd[,as.character(q[3])]
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), xlab='True Premium', ylab='Derived Premium')
points(names(lowb), lowb, pch=16, col='blue',type='b')
points(names(medb), medb, pch=16, col='black',type='b')
points(names(highb), highb, pch=16, col='red',type='b')
legend('topleft', bty='n', fill=c('blue', 'black', 'red'), legend=paste0('\u03b2=', q))
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
col= cols, column_labels = collab, column_names_rot = 0)
q = quantile(betas,probs = c(.33,.5,.66))
lowb  = mInd[,as.character(q[1])]
medb  = mInd[,as.character(q[2])]
highb = mInd[,as.character(q[3])]
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), xlab='True Premium', ylab='Derived Premium')
points(names(lowb), lowb, pch=16, col='blue',type='b')
points(names(medb), medb, pch=16, col='black',type='b')
points(names(highb), highb, pch=16, col='red',type='b')
legend('topleft', bty='n', fill=c('blue', 'black', 'red'), legend=paste0('\u03b2=', q))
minb  = mInd[,as.character(min(betas))]
lowb  = mInd[,as.character(q[1])]
medb  = mInd[,as.character(q[2])]
highb = mInd[,as.character(q[3])]
maxb  = mInd[,as.character(max(betas))]
minb
points(names(minb), minb, pch=16, col='lightblue',type='b')
points(names(lowb), lowb, pch=16, col='blue',type='b')
points(names(medb), medb, pch=16, col='black',type='b')
points(names(highb), highb, pch=16, col='red',type='b')
points(names(maxb), maxb, pch=16, col='darkred',type='b')
dev.off()
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), xlab='True Premium', ylab='Derived Premium')
points(names(minb), minb, pch=16, col='lightblue',type='b')
points(names(lowb), lowb, pch=16, col='blue',type='b')
points(names(medb), medb, pch=16, col='black',type='b')
points(names(highb), highb, pch=16, col='red',type='b')
points(names(maxb), maxb, pch=16, col='darkred',type='b')
legend('topleft', bty='n', fill=c('lightblue','blue', 'black', 'red', 'darkred'),
legend=paste0('\u03b2=', c(min(betas), q, max(betas))))
# Point plot --------------------------------------------------------------------
q = quantile(betas,probs = c(.01,.33,.5,.66, .99))
q
minb  = mInd[,as.character(q[1])]
lowb  = mInd[,as.character(q[2])]
medb  = mInd[,as.character(q[3])]
highb = mInd[,as.character(q[4])]
maxb  = mInd[,as.character(q[5])]
minb
maxb
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), xlab='True Premium', ylab='Derived Premium')
points(names(minb), minb, pch=16, col='lightblue',type='b')
points(names(lowb), lowb, pch=16, col='blue',type='b')
points(names(medb), medb, pch=16, col='black',type='b')
points(names(highb), highb, pch=16, col='red',type='b')
points(names(maxb), maxb, pch=16, col='darkred',type='b')
legend('topleft', bty='n', fill=c('lightblue','blue', 'black', 'red', 'darkred'),
legend=paste0('\u03b2=', q))
# Point plot --------------------------------------------------------------------
q = quantile(betas,probs = c(.1,.33,.5,.66, .9))
minb  = mInd[,as.character(q[1])]
lowb  = mInd[,as.character(q[2])]
medb  = mInd[,as.character(q[3])]
highb = mInd[,as.character(q[4])]
maxb  = mInd[,as.character(q[5])]
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), xlab='True Premium', ylab='Derived Premium')
points(names(minb), minb, pch=16, col='lightblue',type='b')
points(names(lowb), lowb, pch=16, col='blue',type='b')
points(names(medb), medb, pch=16, col='black',type='b')
points(names(highb), highb, pch=16, col='red',type='b')
points(names(maxb), maxb, pch=16, col='darkred',type='b')
legend('topleft', bty='n', fill=c('lightblue','blue', 'black', 'red', 'darkred'),
legend=paste0('\u03b2=', q))
# Point plot --------------------------------------------------------------------
q = quantile(betas,probs = seq(0.01,.99, by=0.1))
q
# Point plot --------------------------------------------------------------------
q = quantile(betas,probs = c(.1,.33,.5,.66, .9))
minb  = mInd[,as.character(q[1])]
lowb  = mInd[,as.character(q[2])]
medb  = mInd[,as.character(q[3])]
highb = mInd[,as.character(q[4])]
maxb  = mInd[,as.character(q[5])]
plot(NULL, xlim=c(-1,1), ylim=c(-1,1), xlab='True Premium', ylab='Derived Premium')
points(names(minb), minb, pch=16, col='lightblue',type='b')
points(names(lowb), lowb, pch=16, col='blue',type='b')
points(names(medb), medb, pch=16, col='black',type='b')
points(names(highb), highb, pch=16, col='red',type='b')
points(names(maxb), maxb, pch=16, col='darkred',type='b')
legend('topleft', bty='n', fill=c('lightblue','blue', 'black', 'red', 'darkred'),
legend=paste0('\u03b2=', q))
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F, cluster_row_slices = F,
column_title = expression(beta), row_title = 'Premium on Choice',
col= cols, column_labels = collab, column_names_rot = 0)
Heatmap(mInd, name = 'Indifference Point', cluster_rows = F, cluster_columns = F, cluster_row_slices = T,
column_title = expression(beta), row_title = 'Premium on Choice',
col= cols, column_labels = collab, column_names_rot = 0)
mInd
mInd[nrow(mInd):1,]
Heatmap(mInd[nrow(mInd):1,], name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
col= cols, column_labels = collab, column_names_rot = 0)
Heatmap(mInd[nrow(mInd):1,], name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
col= cols, column_labels = collab, column_names_rot = 0,
row_names_side = 'left')
Heatmap(mInd[nrow(mInd):1,], name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
col= cols, column_labels = collab, column_names_rot = 0,
row_names_side = 'left', column_title_side = 'bottom')
length(collab)
median(collab)
median(seq_along(collab))
collabs[median(seq_along(collab))] = median(betas)
collab = c(min(betas), rep('', length(betas)-2),  max(betas))
collab[median(seq_along(collab))] = median(betas)
Heatmap(mInd[nrow(mInd):1,], name = 'Indifference Point', cluster_rows = F, cluster_columns = F,
column_title = expression(beta), row_title = 'Premium on Choice',
col= cols, column_labels = collab, column_names_rot = 0,
row_names_side = 'left', column_title_side = 'bottom')
setwd('Documents/EffEMG/task/exp2/')
ls()
trigs = read.csv('EffEMG_trigs2.csv')
nrow(trigs)
length(unique(trigs$Binary))
View(trigs)
length(unique(trigs$Code))
View(trigs)
trigs$duplicate = duplicated(trigs$Code)
setwd('Documents/EffEMG/task/exp2/')
trigs = read.csv('EffEMG_trigs2.csv')
trigs$duplicate = duplicated(trigs$Code)
sum(trigs$duplicate)
setwd('Documents/EffEMG/task/exp2/')
trigs = read.csv('EffEMG_trigs2.csv')
setwd('/Documents/EffEMG/task/exp2/')
setwd('~/Documents/EffEMG/task/exp2/')
trigs = read.csv('EffEMG_trigs2.csv')
trigs$duplicate = duplicated(trigs$Code)
sum(trigs$duplicate)
setwd('~/Documents/EffEMG/github/')
trigs = read.csv('EffEMG_trigs2.csv')
setwd('~/Documents/EffEMG/github/task/exp2/')
trigs = read.csv('EffEMG_trigs2.csv')
trigs$duplicate = duplicated(trigs$Code)
sum(trigs$duplicate)
setwd('~/Documents/EffEMG/github/task/exp1/')
trigs = read.csv('EffEMG_trigs2.csv')
trigs = read.csv('EffEMG_trigs.csv')
trigs$duplicate = duplicated(trigs$Code)
sum(trigs$duplicate)
